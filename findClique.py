import random
from graph import Graph
from vertex import Vertex
from configuration import *

# configuration = Config.get_instance()
# alpha = configuration.parameters["alpha"]
# optimal = configuration.parameters["optimal"]
# max_iterations = configuration.parameters["iterations"]
# num_ants = configuration.parameters["num_ants"]
# evaporation_rate = configuration.parameters["evaporation"]

# alpha = 1.0
# optimal = 13
# max_iterations = 100
# num_ants = 30
# evaporation_rate = 0.02

TAU_MAX = 6
TAU_MIN = 0.01

def probability(v, candidates, ALPHA: float):
    denominator = sum(candidate.pheromone_value for candidate in candidates)
    return v.pheromone_value/(denominator**ALPHA)

def evaporatePheromone(all_vertex, EVAPORATION_RATE):
    for vertex in all_vertex:
        vertex.pheromone_value *= (1.0 - EVAPORATION_RATE)
        if vertex.pheromone_value < TAU_MIN:
            vertex.pheromone_value = TAU_MIN

def updatePheromone(clique, pheromone):
    for vertex in clique:
        vertex.pheromone_value += pheromone
        if vertex.pheromone_value > TAU_MAX:
            vertex.pheromone_value = TAU_MAX


def findClique(G, ALPHA, MAX_ITERATIONS, NUM_ANTS, EVAPORATION_RATE, OPTIMAL):
    # vector with possible neighbours of current clique
    candidates = []

    # cliques generated by each ant
    cliqueVector = []

    # best clique up until this iteration
    bestClique = [] 
    it=0

    largestClique = []
    while it < MAX_ITERATIONS and len(bestClique) != OPTIMAL:
        for k in range(NUM_ANTS):
            v = random.choice(G.vertex_list) 
            clique = []
            clique.append(v)
            candidates = v.neighbours

            #while we can add vertices to our clique
            while(len(candidates) != 0):
                prob = [probability(w, candidates, ALPHA) for w in candidates]
                w = random.choices(candidates, weights=prob, k=1)[0]
                clique.append(w)
                candidates = list(set(candidates) & set(w.neighbours))
            cliqueVector.append(clique)
        
            
        evaporatePheromone(G.vertex_list, EVAPORATION_RATE)  

        cliqueLength = [len(c) for c in cliqueVector]
        maxCliques = [c for c in cliqueVector if len(c) == max(cliqueLength)]
        clique = random.choice(maxCliques)

        if len(clique) > len(largestClique):
            largestClique = clique

        pheromone = 1/(1+len(largestClique) - len(clique))
        updatePheromone(clique, pheromone)


        # for clique in cliqueVector:
        #     if(len(clique) > len(largestClique)):
        #         largestClique = clique
        #     pheromone = 1/(1+len(largestClique) - len(clique))
        #     updatePheromone(clique, pheromone)
        it+=1 
        
    #print("-"*50)
    #print(f"Numero de iterações: {it}")
    return largestClique

def run(FILE_NAME, ALPHA, MAX_ITERATIONS, NUM_ANTS, EVAPORATION_RATE, OPTIMAL):
    graph = Graph(FILE_NAME)
    size = len(findClique(graph, ALPHA, MAX_ITERATIONS, NUM_ANTS, EVAPORATION_RATE, OPTIMAL))
    return size
       




